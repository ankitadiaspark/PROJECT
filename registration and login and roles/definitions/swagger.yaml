swagger: '2.0'
info:
  description: Service calls for various operations
  version: 1.0.0
  title: Application API
host: localhost
basePath: /api/v1
schemes:  
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: query
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the query string.  
     A valid JWT token is generated by the API and returned as answer of a call
     to the route /login giving a valid user & password.
consumes:
  - application/json      
# produces:
#   - application/json
paths:
  /user/userLogin:
    post:
      consumes:
        - application/x-www-form-urlencoded
      tags:
        - User
      summary: To check whether user exists in userpool or not and returns its data.
      description: to check whether user exists in userpool or not and returns its data
      operationId: userLoginPOST
      parameters:
        - name: username
          in: formData
          description: username given during login
          required: true
          type: string
        - name: password
          in: formData
          description: password given during login
          required: true
          type: string
      responses:
        '200':
          description: Returns user id, type and other information about the user according to its type.
          schema:
            $ref: '#/definitions/userLoginResponse'
        '401':
          description: Returns error message in case of unauthorized login
          schema:
            $ref: '#/definitions/genericErrorResponse'
      x-swagger-router-controller: User
definitions:
  userLoginResponse:
    properties:
      success:
        type: boolean
        description: "true for success. Other as per message!"
      message:
        type: string
        description: 'Will be "success" or the error message details, if applicable'
      data:
        type: object
        properties:
          # userId:
          #   type: integer
          #   description: "Id of the user in the database"
          # userTypeId:
          #   type: integer
          #   description: "Type Id of the user(admin, dealer, user)"
          username:
            type: string
            description: "username"
          password:
            type: string
            description: "password of the user"
          # firstName:
          #   type: string
          #   description: "FirstName of the user"
          # middleName:
          #   type: string
          #   description: "MiddleName of the user"
          # lastName:
          #   type: string
          #   description: "LastName of the user"
  genericErrorResponse:
    properties:
      success:
        type: boolean
        description: "true for success, false for error."
      message:
        type: string
        description: "Error message"